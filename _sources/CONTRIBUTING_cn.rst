============================
贡献 JDAT 笔记本
============================

本文档概述了通过遵循 JWST 数据分析工具 (JDAT) 的“笔记本驱动开发”方法为数据分析工具生态系统贡献代码的过程。这里的程序描述了将笔记本通过连续开发阶段转变为可以在太空望远镜笔记本库中“实时”使用的内容的过程。

这些笔记本可以有许多不同的科学案例，但遵循相对标准的工作流程：

1. `草稿阶段`_
2. `基线阶段`_
3. `笔记本驱动开发`_
4. `高级阶段`_
5. `基于社区反馈的修订`_

这些阶段及其之间的转换过程将在下文中描述。

**通过拉取请求提交笔记本的程序在本文档末尾进行了描述。
这对于每个阶段都是重复的。**

请注意，关于编写 Jupyter 笔记本的信息在 `STScI 笔记本风格指南 <https://github.com/spacetelescope/style-guides/blob/master/guides/jupyter-notebooks.md>`_ 中有更多详细说明，关于 Python 代码的类似指导在 `STScI Python 风格指南 <https://github.com/spacetelescope/style-guides/blob/master/guides/python.md>`_ 中也有。这些指南的目的是使审查步骤更容易。

.. important::

    请注意，所有与 JDAT 相关的代码应使用 `Python 3` 编写；不支持 `Python 2`。

草稿阶段
-----------
此阶段的主要目的是记录科学工作流程，但不包括实际代码。此阶段通常主要由科学家完成。合理情况下，如果笔记本较简单或基础工具已经开发得足够好，可以直接实现，则可以跳过此阶段。

在此阶段开始笔记本时，笔记本作者应从 `笔记本风格指南 <https://github.com/spacetelescope/style-guides/blob/master/guides/jupyter-notebooks.md>`_ 中的笔记本模板或一个空白的 Jupyter 笔记本开始。然后，他们用文字写出他们的工作流程。在可能的情况下，他们放入*示例*代码，即使它尚未实现。例如，作者可能在这样的笔记本中写道：

.. code-block:: python

    In [ ]: spectral_line = find_line(jwst_miri_spectrum)

    # `spectral_line` 应该是一个按 spaxel 索引的线中心和线名称的列表，
    # 使用基于导数的线查找器找到。

笔记本的顶级标题（即标题）应以“草稿：”开头，以明确表明这是一个草稿笔记本。然而，文件名中*不应*包含 `draft`，因为文件名通常在后续阶段保持不变。

一旦草稿准备好，作者应创建一个拉取请求，包含草稿笔记本的内容（请参见本文档末尾的说明）。

基线阶段
--------------
此阶段的主要目的是获得一个功能性笔记本以记录工作流程。此阶段通常也由科学家完成（尽管可以向开发人员询问问题）。这通常是开发的*第一*步。也就是说，如果工作流程已经合理地可以使用现有工具实现，则草稿笔记本不是必需的。

在此阶段，笔记本应实际从头到尾执行，但可以“粗糙”。例如，笔记本可能有几个单元格，其中包含如下内容：

.. code-block:: python

    In [ ]: spec = Spectrum(np.linspace(a, b, 1000)*u.angstrom, some_complex_function(...))

科学家可能认为这太复杂，因此为了传达他们对改进工作流程的期望，他们创建一个“开发者注释”。开发者注释应作为笔记本的一部分，并应为一个单独的 markdown 单元格（而不是代码单元格 - 开发者注释中的代码示例可以作为文字 markdown 块完成 - 即用 `\`\`\`` 包围块或用 \` 包围内联代码）。该单元格应以文本 ``*开发者注释:*`` 开头。例如，笔记本中可以在上述单元格下添加一个 markdown 单元格，内容如下：

.. code-block::

    *开发者注释:*
    创建上述光谱有点复杂，如果有一个简单的函数可以直接执行 `spec = simulate_jwst_spectrum(a, b)`，将会改善工作流程。

从而提供了关于特定开发将如何简化工作流程的指导。

如果以这种形式新创建了一个笔记本，作者可以遵循“通过拉取请求提交笔记本的程序”（见本文档末尾），跳过草稿阶段步骤。

如果笔记本是在草稿阶段步骤中已经创建的，并且已经遵循了“通过拉取请求提交笔记本的程序”，则作者只需创建一个新分支以修改现有代码，然后在准备好后创建一个新的拉取请求。

在任何情况下，笔记本的标题（但不是文件名）应以“基线:”开头，以指示笔记本处于基线阶段。

一旦创建了拉取请求，笔记本将自动在库中构建，以便审阅者可以查看。审阅者可以在 Github 上对笔记本进行评论。在此阶段，审查的门槛仍然相对较低 - 主要是确保笔记本从头到尾可以运行，并且没有意外提交数据文件等。

最后，有三个与笔记本相关的重要技术细节在此阶段变得相关（并在未来阶段继续适用）：

1. 笔记本的输出单元格在进行 git 提交之前*应始终*被清除。笔记本输出有时可能非常大（例如图表等可能达到几兆字节），而 git 旨在处理源代码，而不是数据。清除输出还确保笔记本可以从头到尾运行，因此可以被他人重现。

2. 笔记本所需的任何数据文件需要其他可能审查或测试笔记本的人可以访问。应遵循 `STScI 关于笔记本数据存储的指南 <https://github.com/spacetelescope/style-guides/blob/master/guides/where-to-put-your-data.md>`_。JWST 笔记本的具体补充是，笔记本数据应位于 `DMD_Managed_Data/JWST/jwst-data_analysis_tools` Box 文件夹（或其子文件夹）中。如果您尚未访问此 Box 文件夹，请向项目科学家询问，他们应该能够将您添加。请注意，如果基线笔记本使用的数据尚不应公开，最简单的选择可能是中央存储，但在这种情况下，笔记本状态必须明确指出必须在 STScI 网络内运行。

3. 笔记本应清楚地说明用于生成笔记本的各种依赖项的版本。这些版本应放在与笔记本本身位于同一目录中的 `requirements` 文件中。该文件的示例位于 ``example_notebook`` 文件夹中。这将确保审阅者/测试人员可以确认，如果他们遇到问题，问题不是由于软件版本不匹配造成的。

笔记本将经历科学和技术审查，这可能还会产生额外的开发者注释。然后，一旦解决了审查意见，它将被合并到库中。这标志着基线阶段的结束。

笔记本驱动开发
---------------------------
在草稿和基线阶段之后，可能需要进行大量开发。基线笔记本可能包含许多希望在数据分析工具中进行更多开发的领域，或者可能只需要一些小的调整（或根本不需要！）。因此，此阶段是最灵活的，取决于开发资源等。一般来说，目的是让开发人员能够重用笔记本中的代码片段作为开发测试，同时偶尔（如有必要）向笔记本作者寻求指导，以确保实现确实满足笔记本的需求。此步骤没有正式的过程，但预计 JDAT 规划过程（目前在 Jira 上）会跟踪在给定笔记本可以继续进入下一个阶段之前所需的具体步骤。

高级阶段
--------------
一旦基线笔记本完成，下一阶段是将基线构建为尽可能一致地使用 DAT 或相关社区开发的软件的笔记本。通常由开发人员审查基线笔记本，并与科学家合作开发额外的 DAT 代码，特别关注解决“开发者注释”。笔记本作者和开发人员共同决定谁实际修改笔记本并提供拉取请求，但很可能两者都会在某种程度上参与。一个示例方法是开发人员获取基线笔记本，标记出评论，例如（使用上述示例）：

.. code-block:: python

    In [ ]: spec = Spectrum(np.linspace(a, b, 1000)*u.angstrom, some_complex_function(...))

创建上述光谱有点复杂，如果有一个简单的函数可以直接执行 ``spec = simulate_jwst_spectrum(a, b)``，将会改善工作流程。

.. code-block::

    *开发进展:*
    这现在已实现为 JWSTSimulator.make_spectrum(a, b, anotherparameterthatturnsouttobeimportant)。你能试试这个并确保它在这里工作吗？

然后创建一个包含这些评论的 git 提交。原作者随后将在后续提交中解决这些评论。随着笔记本驱动开发的继续，可能会有多个此类拉取请求。但一旦所有开发者注释都已解决，开发人员和作者可以宣布笔记本准备好称为“高级”。

一旦笔记本作者（原作者和开发人员/审阅者）达成一致认为它已准备好，其中一人按照上述描述的拉取请求工作流程进行操作，但笔记本标题现在仅更改为标题本身（不带“草稿:”或“基线:”）。然后，拉取请求由项目科学家之一进行审查，并在所有人对笔记本满意时合并。

基于社区反馈的修订
------------------------------------
当然，科学并不是一成不变的！随着时间的推移，一些已完成的笔记本可能需要增强或更改。一般来说，这些遵循标准的拉取请求工作流程，并且一旦笔记本公开（无论是在 STScI 内部还是外部），任何人都可以提交。虽然库维护者管理此过程，但笔记本作者可能会不时被召集提供对任何提议更改的意见或看法。

通过拉取请求提交笔记本的程序
------------------------------------------------

提交新笔记本遵循 Github 拉取请求工作流程。所有细节在 `STScI git 工作流程风格指南 <https://github.com/spacetelescope/style-guides/blob/master/guides/git-workflow.md>`_ 中都有说明。这里我们提供一个“食谱”程序，但如果您遇到困难或不确定如何操作，请随时向团队的其他成员寻求帮助！

请注意，如果您在创建第一个拉取请求后更新笔记本，这些步骤会略有不同 - 您可以跳过步骤 1-3 和 5。

1. 访问 GitHub 工作空间 https://github.com/spacetelescope/jdat_notebooks，并将库分叉到您的用户帐户（右上角的“Fork”按钮）。

2. 在您的计算机上本地克隆该库
::

    git clone git@github.com:username/jdat_notebooks.git

3. 虽然这将设置 ``origin`` 指向您的分叉，但当前与主 ``spacetelescope`` “上游”库没有连接。因此，您可以通过以下方式将本地克隆指向正确的库：
::
    git remote add upstream https://github.com/spacetelescope/jdat_notebooks.git

4. 创建一个新分支以开始开发并切换到该分支
::
    git branch new_notebook_branch_name
    git checkout new_notebook_branch_name

5. 创建一个新文件夹以开发笔记本
::
    cd notebooks
    mkdir new_notebook_name

6. 现在开始构建您的笔记本 (new_notebook_name.ipynb)!
::

7. 在开发的任何时候，保存您的工作并将其推送到您的分叉库。（重要：在进行 ``add/commit`` 之前，您必须使用 Jupyter 界面清除笔记本的输出。）
::
    git add new_notebook_name.ipynb
    git commit -m "清晰的信息以说明对笔记本的修复或改进"
    git push origin new_notebook_branch_name

有时您需要重置上游，因此在这种情况下是 
::
    git push --set-upstream origin new_notebook_branch_name

8. 当您对笔记本满意时，仔细检查您是否满足笔记本特定状态的技术要求（见上文）。

9. 现在您可以从 ``spacetelescope/jdat_notebooks`` 库创建拉取请求。您可以通过单击网页上的 ``New pull request``，然后点击链接 ``compare across forks`` 来完成。然后将基础库设置为 ``spacetelescope/jdat_notebooks`` 和分支 ``main``，将头部分叉设置为您个人分叉中的分支，即库 ``username/jdat_notebooks`` 和分支 ``new_notebook_branch_name``。您设置一个标题，然后单击 ``Create pull request``。

在提交 PR 后，请求将经历各种科学和技术审查阶段。在成功完成这些阶段后，PR 可以被合并。

有关如何为 Jdat 笔记本做出贡献的更多详细信息，请参见 `STScI Jdat 笔记本文档 <https://spacetelescope.github.io/jdat_notebooks/index.html>`_。